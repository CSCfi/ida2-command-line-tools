#!/bin/bash
#--------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2019 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license GNU Affero General Public License, version 3
# @link https://research.csc.fi/
#--------------------------------------------------------------------------------

RELEASE_CHECKSUM="b6e60d8811c62b8122d8e6fd915e73aedde6d75f60bc1fea41845644baf9faf0"

IDA_BETA_SCRIPT="false"

#--------------------------------------------------------------------------------
# Verify that required commands, tools, and applications are available...

if [[ "$OSTYPE" = "darwin"* ]]; then
   # Mac OSX
   REQUIRED_TOOLS="curl xargs awk shasum"
else
   # Linux
   REQUIRED_TOOLS="curl xargs awk sha256sum"
fi

for REQUIRED in $REQUIRED_TOOLS
do
    PROG_LOCATION=`/usr/bin/which $REQUIRED 2>/dev/null`
    if [ ! -e "$PROG_LOCATION" ]; then
        echo "Error: Can't find $REQUIRED in \$PATH." >&2
        exit 1
    fi
done

#--------------------------------------------------------------------------------

if [[ "$OSTYPE" = "darwin"* ]]; then
    CURRENT_CHECKSUM=`cat $0 | grep -v 'RELEASE_CHECKSUM="' | shasum -a 256 | awk '{print $1}' | tr '[A-Z]' '[a-z]'`
else
    CURRENT_CHECKSUM=`cat $0 | grep -v 'RELEASE_CHECKSUM="' | sha256sum - | awk '{print $1}' | tr '[A-Z]' '[a-z]'`
fi

USAGE="
Usage: ida [-h]
       ida upload    [-v] [-c config] [-i ignore] [-t host] [-p project]      target_pathname local_pathname
       ida download  [-v] [-c config]             [-t host] [-p project] [-f] target_pathname local_pathname
       ida copy      [-v] [-c config]             [-t host] [-p project] [-f] target_pathname new_target_pathname
       ida move      [-v] [-c config]             [-t host] [-p project]      target_pathname new_target_pathname
       ida delete    [-v] [-c config]             [-t host] [-p project]      target_pathname
       ida info      [-v] [-c config]             [-t host] [-p project] [-f] target_pathname
       ida inventory [-v] [-c config]             [-t host] [-p project]

       -h : show this guide
       -v : provide verbose output
       -c : configuration file
       -i : ignore file
       -t : target host (default: \"https://ida.fairdata.fi\")
       -p : project name
       -f : target_pathname is relative to frozen area, new_target_pathname is relative to staging area

       Pathnames may correspond to either files or folders. If a folder is specified, then the action is
       performed for all files within that folder and all subfolders. Folders are downloaded as zip files.
       Actions can be performed on only one file or folder at a time.

       Unless the -f parameter is specified, target_pathname and new_target_pathname are relative to the
       staging area of the specified project. If the -f parameter is specified, then the target_pathname is
       relative to the frozen area; and if the copy action is specified, the new_target_pathname is relative
       to the staging area of the specified project. The -f parameter is **only** allowed for download, copy,
       and info actions.

       local_pathname is the pathname of a folder or file on the local system which is to be uploaded, or the
       pathname on the local system to which a file will be downloaded (either a single data file or the zip
       file for a data folder). Existing local files will not be overwritten when downloading, however, uploaded
       files will overwrite any existing files in the IDA service.

       move can also be used to rename a file or folder without changing its location.

       Configuration settings will be taken from existing environment variables, followed by '\$HOME/.ida-config',
       followed by a configuration file specified with the -c option, followed by any other specified command
       line options.

       Username and password may be defined using netrc (https://ec.haxx.se/usingcurl-netrc.html).

       An optional file containing filename patterns to exclude from upload can be defined as '\$HOME/.ida-ignore'
       or specified with the -i option. The file should contain one pattern per line, and will be applied only
       to filenames, not to pathnames or portions of pathnames. Patterns should be compatible with those understood
       by the -name option of the POSIX find command.

       This script utilizes a curl cookie jar stored as '\$HOME/.ida-cookie-jar'. If you encounter authentication
       errors, try deleting the cookie jar file to clear any expired session cookies.

       Note that files are not officially stored persistently in the IDA service until they are frozen, which can
       only be done using the web UI of the service (https://www.fairdata.fi/en/ida/user-guide/#project-data-storage).

       Output format of the info action is plain text with indentation. Output format of the inventory action is JSON.

       checksum: ${CURRENT_CHECKSUM}
"

if [ "$IDA_BETA_SCRIPT" = "true" ]; then
    USAGE="$USAGE
       *** UNOFFICIAL VERSION - USE AT YOUR OWN RISK! ***
"
fi

if [ "$CURRENT_CHECKSUM" != "$RELEASE_CHECKSUM" ]; then
    USAGE="$USAGE
       *** MODIFIED VERSION - USE AT YOUR OWN RISK! ***
"
fi

#--------------------------------------------------------------------------------

SCRIPT_DIR=`dirname $0`

IDA_HOST="https://ida.fairdata.fi"
IDA_WEBDAV="/remote.php/webdav"
IDA_API="/apps/ida/api"
IDA_STAGING_SUFFIX="%2b"
IDA_CONFIG_FILE="$HOME/.ida-config"
IDA_IGNORE_FILE="$HOME/.ida-ignore"
IDA_COOKIE_JAR="$HOME/.ida-cookie-jar"
IDA_CURL_OPS="-s -S -L -b $IDA_COOKIE_JAR -c $IDA_COOKIE_JAR"
IDA_EXECUTE_ACTION="true"
IDA_NETRC=""
IDA_FROZEN="false"

#--------------------------------------------------------------------------------

function checkScriptIntegrity {

    if [ ! -f $SCRIPT_DIR/.debug ]; then
        if [ "$CURRENT_CHECKSUM" != "$RELEASE_CHECKSUM" ]; then
            echo "Error: Checksum of current script $CURRENT_CHECKSUM does not match checksum of released version: $RELEASE_CHECKSUM" >&2
            exit 1
        fi
    fi
}

function urlEncode () {
    # Escape all special characters, for use in curl URLs
    local RESULT=`echo "${1}" | \
                      sed -e  's:\%:%25:g' \
                          -e  's: :%20:g' \
                          -e  's:\\+:%2b:g' \
                          -e  's:<:%3c:g' \
                          -e  's:>:%3e:g' \
                          -e  's:\#:%23:g' \
                          -e  's:{:%7b:g' \
                          -e  's:}:%7d:g' \
                          -e  's:|:%7c:g' \
                          -e  's:\\\\:%5c:g' \
                          -e  's:\\^:%5e:g' \
                          -e  's:~:%7e:g' \
                          -e  's:\\[:%5b:g' \
                          -e  's:\\]:%5d:g' \
                          -e $'s:\':%27:g' \
                          -e  's:\`:%60:g' \
                          -e  's:;:%3b:g' \
                          -e  's:\\?:%3f:g' \
                          -e  's/:/%3a/g' \
                          -e  's:@:%40:g' \
                          -e  's:=:%3d:g' \
                          -e  's:\\&:%26:g' \
                          -e  's:\\$:%24:g' \
                          -e  's:\\!:%21:g' \
                          -e  's:\\*:%2a:g'`

    echo "${RESULT}"
}

function checkLength {
    PATHNAME_LENGTH=`echo "${1}" | wc -c`
    if [ "$PATHNAME_LENGTH" -gt 200 ]; then
        echo "Error: URL encoded pathname exceeds maximum allowed length of 200 characters: ${1}" >&2
        exit 1
    fi
}

function checkScope {

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "Verifying pathname does not conflict with any ongoing action..." >&2
    fi

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X POST -K- -o /dev/null -w \"%{http_code}\" \"${IDA_HOST}${IDA_API}/checkScope?project=${IDA_PROJECT}&pathname=${1}\" <<< \"$IDA_VERBOSE_CREDENTIALS\" " >&2
    fi

    RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X POST -K- -o /dev/null -w "%{http_code}" "${IDA_HOST}${IDA_API}/checkScope?project=${IDA_PROJECT}&pathname=${1}" <<< "$IDA_STDIN_CREDENTIALS" `

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "Response: ${RESPONSE}" >&2
    fi

    if [ "$RESPONSE" = "409" ]; then
        echo "Error: Specified target conflicts with an ongoing action." >&2
        exit 1
    fi

    if [[ ${RESPONSE::1} != "2" ]]; then
        echo "Error: POST request failed for '/checkScope?project=${IDA_PROJECT}&pathname=${1}': ${RESPONSE}" >&2
        exit 1
    fi
}

function verifyTargetExists {

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Verifying specified target exists..."
    fi

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -I -K- -o /dev/null -w \"%{http_code}\" ${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${1}\" <<< \"$IDA_VERBOSE_CREDENTIALS\"" >&2
    fi

    RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -I -K- -o /dev/null -w "%{http_code}" "${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${1}" <<< "$IDA_STDIN_CREDENTIALS"`

    if [ "$RESPONSE" = "404" ]; then
        echo "Error: Specified target not found." >&2
        exit 1
    fi

    if [[ ${RESPONSE::1} != "2" ]]; then
        echo "Error: INFO request failed for '/${IDA_TARGET_FOLDER}/${1}': ${RESPONSE}" >&2
        exit 1
    fi
}

function verifyNewTargetDoesNotExist {

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Verifying specified new target does not exist..."
    fi

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -I -K- -o /dev/null -w \"%{http_code}\" ${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${1}\" <<< \"$IDA_VERBOSE_CREDENTIALS\"" >&2
    fi

    RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -I -K- -o /dev/null -w "%{http_code}" "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${1}" <<< "$IDA_STDIN_CREDENTIALS"`

    if [[ ${RESPONSE::1} = "2" ]]; then
        echo "Error: Specified new target already exists." >&2
        exit 1
    elif [ "$RESPONSE" != "404" ]; then
        echo "Error: INFO request failed for '/${IDA_STAGING_FOLDER}/${1}': ${RESPONSE}" >&2
        exit 1
    fi
}

function checkTargetType {

    TARGET_TYPE="file"

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Verifying specified target is a file..."
    fi

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PROPFIND -K- \"${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${1}\" 2>&1 <<< \"$IDA_VERBOSE_CREDENTIALS\" | grep \"<d:resourcetype><d:collection/></d:resourcetype>\"" >&2
    fi

    NOT_FILE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PROPFIND -K- "${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${1}" 2>&1 <<< "$IDA_STDIN_CREDENTIALS" |  grep "<d:resourcetype><d:collection/></d:resourcetype>"`

    if [ "$NOT_FILE" ]; then
        TARGET_TYPE="folder"
    fi
}

function verifyTargetIsFile {

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Verifying specified target is a file..."
    fi

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PROPFIND -K- \"${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${1}\" 2>&1 <<< \"$IDA_VERBOSE_CREDENTIALS\" | grep \"<d:resourcetype><d:collection/></d:resourcetype>\"" >&2
    fi

    NOT_FILE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PROPFIND -K- "${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${1}" 2>&1 <<< "$IDA_STDIN_CREDENTIALS" |  grep "<d:resourcetype><d:collection/></d:resourcetype>"`

    if [ "$NOT_FILE" ]; then
        echo "Error: Specified target is not a file." >&2
        exit 1
    fi
}

function ensureAncestorFoldersExist {

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Verifying all folders in new target pathname exist..."
    fi

    ANCESTOR_PATHNAME=`dirname "$1" | sed -e 's/^\///' | sed -e 's/\/$//'`
    ANCESTOR_FOLDER_PATHNAME=""

    if [ "$ANCESTOR_PATHNAME" = "." ]; then
        ANCESTOR_PATHNAME=""
    fi

    while [ "$ANCESTOR_PATHNAME" ]; do

        ANCESTOR_FOLDER=`echo "$ANCESTOR_PATHNAME" | sed -e 's/\/.*//'`

        if [ "$ANCESTOR_FOLDER_PATHNAME" ]; then
            ANCESTOR_FOLDER_PATHNAME="$ANCESTOR_FOLDER_PATHNAME/$ANCESTOR_FOLDER"
        else
            ANCESTOR_FOLDER_PATHNAME="$ANCESTOR_FOLDER"
        fi

        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Verifying new target pathname folder: ${ANCESTOR_FOLDER_PATHNAME}"
        fi

        ANCESTOR_ENCODED_PATHNAME=$(urlEncode "${ANCESTOR_FOLDER_PATHNAME}")

        # Verify pathname does not exceed length limit

        checkLength "$ANCESTOR_ENCODED_PATHNAME"

        # Verify new target pathname does not conflict with ongoing action

        checkScope "$ANCESTOR_ENCODED_PATHNAME"

        if [ "$IDA_DEBUG" = "true" ]; then
            echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MKCOL -K- \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ANCESTOR_ENCODED_PATHNAME}\" >/dev/null <<< \"$IDA_VERBOSE_CREDENTIALS\"" >&2
        fi

        if [ "$IDA_EXECUTE_ACTION" = "true" ]; then
            # Ignore any failure (i.e. when folder already exists)
            curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MKCOL -K- "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ANCESTOR_ENCODED_PATHNAME}" >/dev/null <<< "$IDA_STDIN_CREDENTIALS"
        fi

        if [ "$ANCESTOR_PATHNAME" = "$ANCESTOR_FOLDER" ]; then
            ANCESTOR_PATHNAME=""
        else
            ANCESTOR_PATHNAME=`echo "$ANCESTOR_PATHNAME" | sed -e 's/[^\/]*\///'`
        fi
    done
}

function execute-ida-inventory {

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -K- \"${IDA_HOST}${IDA_API}/inventory/${IDA_PROJECT}\" 2>&1 <<< \"$IDA_VERBOSE_CREDENTIALS\" " >&2
    fi

    curl $IDA_CURL_OPS $IDA_NETRC --globoff -K- "${IDA_HOST}${IDA_API}/inventory/${IDA_PROJECT}" <<< "$IDA_STDIN_CREDENTIALS"
}

function execute-ida-upload {

    ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}")

    # Verify pathname does not exceed length limit

    checkLength "$ENCODED_PATHNAME"

    # Verify pathname does not conflict with ongoing action

    checkScope "$ENCODED_PATHNAME"

    if [ -s "$IDA_IGNORE_FILE" ]; then
        FIND_EXCLUDE=$(printf " ! -name %s " $(cat $IDA_IGNORE_FILE))
    fi

    if [ "$IDA_DEBUG" = "true" ]; then
        if [ "$FIND_EXCLUDE" ]; then
            echo "FIND EXCLUDE: $FIND_EXCLUDE"
        fi
    fi

    # Ensure all folders in target pathname exist, irregardless of local pathname

    ensureAncestorFoldersExist "$TARGET_PATHNAME"

    # If local pathname is directory, upload all files in directory tree...

    if [ -d "$LOCAL_PATHNAME" ]; then

        LOCAL_PATHNAME_LENGTH=`echo "$LOCAL_PATHNAME" | wc -c | sed -e 's/[^0-9]*//g'`

        # First create target directory, if necessary

        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Verifying folder: ${TARGET_PATHNAME}"
        fi

        if [ "$IDA_DEBUG" = "true" ]; then
            echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MKCOL -K- \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}\" >/dev/null <<< \"$IDA_VERBOSE_CREDENTIALS\""
        fi

        if [ "$IDA_EXECUTE_ACTION" = "true" ]; then
            # Ignore any failure (i.e. when folder already exists)
            curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MKCOL -K- "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}" >/dev/null <<< "$IDA_STDIN_CREDENTIALS"
        fi

        # Next create all directories in directory tree, as necessary

        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Creating all new target folders (if needed)..."
        fi

        if [ "$IDA_DEBUG" = "true" ]; then
            echo "find \"$LOCAL_PATHNAME\" -type d"
        fi

        find "$LOCAL_PATHNAME" -type d | while read dirname; do

            if [ "$dirname" != "$LOCAL_PATHNAME" ]; then
                TARGET_DIRNAME=`echo "$dirname" | sed -e "s/^.\{$LOCAL_PATHNAME_LENGTH\}//" | sed -e 's/^\///'`

                if [ "$IDA_VERBOSE" = "true" ]; then
                    echo "Verifying folder: ${TARGET_PATHNAME}/${TARGET_DIRNAME}"
                fi

                ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}/${TARGET_DIRNAME}")

                # Verify pathname does not exceed length limit

                checkLength "$ENCODED_PATHNAME"

                # Verify new target pathname does not conflict with ongoing action. We check before each operation in
                # case another user initiates an action while a length upload is in progress...

                checkScope "$ENCODED_PATHNAME"

                if [ "$IDA_DEBUG" = "true" ]; then
                    echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MKCOL -K- \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}\" >/dev/null <<< \"$IDA_VERBOSE_CREDENTIALS\""
                fi

                if [ "$IDA_EXECUTE_ACTION" = "true" ]; then
                    # Ignore any failure (i.e. when folder already exists)
                    curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MKCOL -K- "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}" >/dev/null <<< "$IDA_STDIN_CREDENTIALS"
                fi
            fi
        done

        # Upload all files in directory tree

        if [ "$IDA_DEBUG" = "true" ]; then
            echo "Uploading all files in directory tree..."
            echo "find \"$LOCAL_PATHNAME\" -type f $FIND_EXCLUDE"
        fi

        find "$LOCAL_PATHNAME" -type f $FIND_EXCLUDE | while read pathname; do

            TARGET_FILENAME=`echo "$pathname" | sed -e "s/^.\{$LOCAL_PATHNAME_LENGTH\}//" | sed -e 's/^\///'`

            if [ "$IDA_VERBOSE" = "true" ]; then
                echo "Uploading file: ${TARGET_PATHNAME}/${TARGET_FILENAME}"
            fi

            ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}/${TARGET_FILENAME}")

            # Verify pathname does not exceed length limit

            checkLength "$ENCODED_PATHNAME"

            # Verify new target pathname does not conflict with ongoing action. We check before each operation in
            # case another user initiates an action while a length upload is in progress...

            checkScope "$ENCODED_PATHNAME"

            if [ "$IDA_DEBUG" = "true" ]; then
                echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PUT -K- -o /dev/null -w \"%{http_code}\" -T \"$pathname\" \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}\" <<< \"$IDA_VERBOSE_CREDENTIALS\""
            fi

            if [ "$IDA_EXECUTE_ACTION" = "true" ]; then

                # Report fatal error if curl fails...

                RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PUT -K- -o /dev/null -w "%{http_code}" -T "$pathname" "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}" <<< "$IDA_STDIN_CREDENTIALS"`

                if [[ ${RESPONSE::1} != "2" ]]; then
                    echo "Error: PUT request failed for '/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}': ${RESPONSE}" >&2
                    exit 1
                fi
            fi
        done

    # Else, upload individual file

    else

        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Uploading file: ${TARGET_PATHNAME}"
        fi

        if [ "$IDA_DEBUG" = "true" ]; then
            echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PUT -K- -o /dev/null -w "%{http_code}" -T \"$LOCAL_PATHNAME\" \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}\" <<< \"$IDA_VERBOSE_CREDENTIALS\""
        fi

        if [ "$IDA_EXECUTE_ACTION" = "true" ]; then

            # Report fatal error if curl fails...

            RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PUT -K- -o /dev/null -w "%{http_code}" -T "$LOCAL_PATHNAME" "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}" <<< "$IDA_STDIN_CREDENTIALS"`

            if [[ ${RESPONSE::1} != "2" ]]; then
                echo "Error: PUT request failed for '/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}': ${RESPONSE}" >&2
                echo "$OUTPUT" >&2
                exit 1
            fi
        fi
    fi

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Target uploaded successfully."
    fi
}

function execute-ida-move {

    ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}")
    NEW_ENCODED_PATHNAME=$(urlEncode "${NEW_TARGET_PATHNAME}")

    # Verify pathnames do not exceed length limit

    checkLength "$ENCODED_PATHNAME"
    checkLength "$NEW_ENCODED_PATHNAME"

    # Verify neither target nor new target pathname conflicts with ongoing action

    checkScope "$ENCODED_PATHNAME"
    checkScope "$NEW_ENCODED_PATHNAME"

    # Verify that target exists

    verifyTargetExists "$ENCODED_PATHNAME"

    # Verify that new target does not exist

    verifyNewTargetDoesNotExist "$NEW_ENCODED_PATHNAME"

    # Ensure all ancestor folders in new target pathname exist

    ensureAncestorFoldersExist "$NEW_TARGET_PATHNAME"

    # Report fatal error if curl fails...

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MOVE -K- -o /dev/null -w \"%{http_code}\" -H \"Destination:${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${NEW_ENCODED_PATHNAME}\" \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}\" <<< \"$IDA_VERBOSE_CREDENTIALS\""
    fi

    RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X MOVE -K- -o /dev/null -w "%{http_code}" -H "Destination:${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${NEW_ENCODED_PATHNAME}" "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}" <<< "$IDA_STDIN_CREDENTIALS"`

    if [ "$RESPONSE" != "201" ]; then
        echo "Error: MOVE request failed for '/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}': ${RESPONSE}" >&2
        exit 1
    fi

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Target moved successfully."
    fi
}

function execute-ida-copy {

    ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}")
    NEW_ENCODED_PATHNAME=$(urlEncode "${NEW_TARGET_PATHNAME}")

    # Verify pathnames do not exceed length limit

    checkLength "$ENCODED_PATHNAME"
    checkLength "$NEW_ENCODED_PATHNAME"

    # Verify neither target nor new target pathname conflicts with ongoing action

    checkScope "$ENCODED_PATHNAME"
    checkScope "$NEW_ENCODED_PATHNAME"

    # Verify that target exists

    verifyTargetExists "$ENCODED_PATHNAME"

    # Verify that new target does not exist

    verifyNewTargetDoesNotExist "$NEW_ENCODED_PATHNAME"

    # Ensure all ancestor folders in new target pathname exist

    ensureAncestorFoldersExist "$NEW_TARGET_PATHNAME"

    # Report fatal error if curl fails...

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X COPY -K- -o /dev/null -w \"%{http_code}\" -H \"Destination:${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${NEW_ENCODED_PATHNAME}\" \"${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}\" <<< \"$IDA_VERBOSE_CREDENTIALS\""
    fi

    RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X COPY -K- -o /dev/null -w "%{http_code}" -H "Destination:${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${NEW_ENCODED_PATHNAME}" "${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}" <<< "$IDA_STDIN_CREDENTIALS"`

    if [ "$RESPONSE" != "201" ]; then
        echo "Error: COPY request failed for '/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}': ${RESPONSE}" >&2
        exit 1
    fi


    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Target copied successfully."
    fi
}

function execute-ida-delete {

    ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}")

    # Verify pathname does not exceed length limit

    checkLength "$ENCODED_PATHNAME"

    # Verify target pathname does not conflict with ongoing action

    checkScope "$ENCODED_PATHNAME"

    # Verify that target exists

    verifyTargetExists "$ENCODED_PATHNAME"

    # Report fatal error if curl fails...

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X DELETE -K- -o /dev/null -w \"%{http_code}\" \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}\" <<< \"$IDA_VERBOSE_CREDENTIALS\""
    fi

    RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X DELETE -K- -o /dev/null -w "%{http_code}" "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}" <<< "$IDA_STDIN_CREDENTIALS"`

    if [[ ${RESPONSE::1} != "2" ]]; then
        echo "Error: DELETE request failed for '/${IDA_STAGING_FOLDER}/${ENCODED_PATHNAME}':" >&2
        exit 1
    fi

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Target deleted successfully."
    fi
}

function execute-ida-download {

    ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}")

    # Verify pathname does not exceed length limit

    checkLength "$ENCODED_PATHNAME"

    # Verify that target exists

    verifyTargetExists "$ENCODED_PATHNAME"

    # Ensure local pathname directory exists

    LOCAL_DIRNAME=`dirname "$LOCAL_PATHNAME"`
    if [ ! -d $LOCAL_DIRNAME ]; then
        mkdir -p $LOCAL_DIRNAME 2>/dev/null
        if [ ! -d $LOCAL_DIRNAME ]; then
            echo "Error: local download folder does not exist and/or could not be created: $LOCAL_DIRNAME" >&2
            exit 1
        fi
    fi

    # Determine if target is a file

    checkTargetType "$ENCODED_PATHNAME"

    if [ "$TARGET_TYPE" = "file" ]; then

        # Download file

        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Downloading file: ${TARGET_PATHNAME}"
        fi

        if [ "$IDA_DEBUG" = "true" ]; then
            echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -K- -w \"%{http_code}\" -o \"$LOCAL_PATHNAME\" \"${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}\" <<< \"$IDA_VERBOSE_CREDENTIALS\""
        fi

        if [ "$IDA_EXECUTE_ACTION" = "true" ]; then

            # Report fatal error if curl fails...

            RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -K- -w "%{http_code}" -o "$LOCAL_PATHNAME" "${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}" <<< "$IDA_STDIN_CREDENTIALS"`

            if [[ ${RESPONSE::1} != "2" ]]; then
                echo "Error: GET request failed for '/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}': ${RESPONSE}" >&2
                exit 1
            fi
        fi

    else

        # Verify that local pathname ends in ".zip"

        BASENAME=$(basename -- "$LOCAL_PATHNAME")
        SUFFIX="${BASENAME##*.}"

        if [ "$SUFFIX" != "zip" ]; then
            echo "Error: Local pathame does not end in \".zip\"." >&2
            exit 1
        fi

        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Downloading folder: ${TARGET_PATHNAME}"
        fi

        if [ "$IDA_DEBUG" = "true" ]; then
            echo "curl $IDA_CURL_OPS --globoff -w \"%{http_code}\" --header \"Accept: application/zip\" $IDA_NETRC -K- -o \"$LOCAL_PATHNAME\" \"${IDA_HOST}/index.php/apps/files/ajax/download.php?dir=/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}\" <<< \"$IDA_VERBOSE_CREDENTIALS\""
        fi

        if [ "$IDA_EXECUTE_ACTION" = "true" ]; then

            # Report fatal error if curl fails...

            RESPONSE=`curl $IDA_CURL_OPS --globoff -w "%{http_code}" --header "Accept: application/zip" $IDA_NETRC -K- -o "$LOCAL_PATHNAME" "${IDA_HOST}/index.php/apps/files/ajax/download.php?dir=/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}" <<< "$IDA_STDIN_CREDENTIALS"`

            if [[ ${RESPONSE::1} != "2" ]]; then
                echo "Error: GET request failed for '/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}': ${RESPONSE}" >&2
                exit 1
            fi
        fi
    fi

    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Target downloaded successfully."
    fi
}

function execute-ida-info {

    ENCODED_PATHNAME=$(urlEncode "${TARGET_PATHNAME}")

    # Verify target pathname does not exceed length limit

    checkLength "$ENCODED_PATHNAME"

    # Verify target pathname does not conflict with ongoing action

    checkScope "$ENCODED_PATHNAME"

    # Verify that target exists

    verifyTargetExists "$ENCODED_PATHNAME"

    # Report fatal error if curl fails...

    if [ "$IDA_DEBUG" = "true" ]; then
        echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PROPFIND -K- \"${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}\" 2>&1 <<< \"$IDA_VERBOSE_CREDENTIALS\""
    fi

    OUTPUT=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -X PROPFIND -K- "${IDA_HOST}${IDA_WEBDAV}/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}" 2>&1 <<< "$IDA_STDIN_CREDENTIALS"`

    RESPONSE=`echo "$OUTPUT" | grep '<d:response>'`

    if [ "$RESPONSE" = "" ]; then
        echo "Error: PROPFIND request failed for '/${IDA_TARGET_FOLDER}/${ENCODED_PATHNAME}':" >&2
        echo "$OUTPUT" >&2
        exit 1
    fi

    TARGET_TYPE="file"

    COLLECTION=`echo "$OUTPUT" |  grep "<d:resourcetype><d:collection/></d:resourcetype>"`

    if [ "$COLLECTION" ]; then
        TARGET_TYPE="folder"
    fi

    if [[ "$OSTYPE" = "darwin"* ]]; then
        OUTPUT=$(echo "$OUTPUT" | sed -e $'s/</\\\n</g')
    else
        OUTPUT=`echo "$OUTPUT" | sed -e 's/</\n</g'`
    fi

    echo "project:    $IDA_PROJECT"

    if [ "$TARGET_PATHNAME" = "/" ]; then
        echo "pathname:   /"
    else
        echo "pathname:   /$TARGET_PATHNAME"
    fi

    if [ "$IDA_FROZEN" = "true" ]; then
        echo "area:       frozen"
    else
        echo "area:       staging"
    fi

    echo "type:       $TARGET_TYPE"

    if [ "$TARGET_TYPE" = "file" ]; then

        ENCODING=`echo "$OUTPUT" | grep "<d:getcontenttype>" | head -1 | sed -e 's/^.*>//'`

        if [ "$IDA_FROZEN" = "true" ]; then

            if [ "$IDA_DEBUG" = "true" ]; then
                echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -K- \"${IDA_HOST}${IDA_API}/files/byProjectPathname/${IDA_PROJECT}?pathname=/${ENCODED_PATHNAME}\" 2>&1 <<< \"$IDA_VERBOSE_CREDENTIALS\""
            fi

            OUTPUT=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -K- "${IDA_HOST}${IDA_API}/files/byProjectPathname/${IDA_PROJECT}?pathname=/${ENCODED_PATHNAME}" 2>&1 <<< "$IDA_STDIN_CREDENTIALS"`

            PID=`echo "$OUTPUT" | grep '"pid":'`

            if [ "$PID" = "" ]; then
                echo "Error: GET request failed for '/files/byProjectPathname/${IDA_PROJECT}?pathname=/${ENCODED_PATHNAME}':" >&2
                echo "$OUTPUT" >&2
                exit 1
            fi

            if [[ "$OSTYPE" = "darwin"* ]]; then
                OUTPUT=$(echo "$OUTPUT" | sed -e $'s/[{,]/\\\n/g')
            else
                OUTPUT=`echo "$OUTPUT" | sed -e 's/[{,]/\n/g'`
            fi

            PID=`echo "$OUTPUT" | grep '"pid"' | head -1 | sed -e 's/^.*"pid"[ ]*:[ ]*"//' | sed -e 's/".*$//'`
            SIZE=`echo "$OUTPUT" | grep '"size"' | head -1 | sed -e 's/^.*"size"[ ]*:[ ]*//' | sed -e 's/[^0-9].*$//'`
            CHECKSUM=`echo "$OUTPUT" | grep '"checksum"' | head -1 | sed -e 's/^.*"checksum"[ ]*:[ ]*"//' | sed -e 's/".*$//'`
            MODIFIED=`echo "$OUTPUT" | grep '"modified"' | head -1 | sed -e 's/^.*"modified"[ ]*:[ ]*"//' | sed -e 's/".*$//'`
            FROZEN=`echo "$OUTPUT" | grep '"frozen"' | head -1 | sed -e 's/^.*"frozen"[ ]*:[ ]*"//' | sed -e 's/".*$//'`

        else

            SIZE=`echo "$OUTPUT" | grep "<d:getcontentlength>" | head -1 | sed -e 's/^.*>//'`
            MODIFIED=`echo "$OUTPUT" | grep "<d:getlastmodified>" | head -1 | sed -e 's/^.*>//'`
            MODIFIED=`date -u +"%Y-%m-%dT%H:%M:%SZ" -d "$MODIFIED"`

        fi

        if [ "$PID" ]; then
            echo "pid:        $PID"
        fi

        if [ "$SIZE" ]; then
            echo "size:       $SIZE"
        fi

        if [ "$ENCODING" ]; then
            echo "encoding:   $ENCODING"
        fi

        if [ "$CHECKSUM" ]; then
            echo "checksum:   $CHECKSUM"
        fi

        if [ "$MODIFIED" ]; then
            echo "modified:   $MODIFIED"
        fi

        if [ "$FROZEN" ]; then
            echo "frozen:     $FROZEN"
        fi

    else

        SIZE=`echo "$OUTPUT" | grep "<d:quota-used-bytes>" | head -1 | sed -e 's/^.*>//'`

            if [ "$IDA_FROZEN" = true ]; then
                SED_PATTERN="s:^.*/${IDA_PROJECT}/:  /:"
            else
                SED_PATTERN="s:^.*/${IDA_PROJECT}%2[Bb]/:  /:"
        fi

        echo "size:       $SIZE"
        echo "contents:"

        if [[ "$OSTYPE" = "darwin"* ]]; then
            # Mac OSX
            CONTENTS=$(echo "$OUTPUT" | sed -e $'s:<:\\\n<:g' | grep "<d:href>" | tail -n +2 | sed -e "$SED_PATTERN" | \
                       sed -e 's:n$::' | sed -e 's:\\\\\\$:$:g' | sed -e $'s:\%:\\\\x:g')
        else
            # Linux
            CONTENTS=$(echo "$OUTPUT" | sed -e 's/</\n</g' | grep "<d:href>" | tail -n +2 | sed -e "$SED_PATTERN" | \
                       sed -e 's:\\\\\\$:$:g' | sed -e $'s:\%:\\\\x:g')
        fi

        for CHILD_PATHNAME in $CONTENTS
        do
            printf "  ${CHILD_PATHNAME}\n"
        done

    fi
}

#--------------------------------------------------------------------------------
# Load personal configuration file, if it exists...

if [ -f "${IDA_CONFIG_FILE}" ]; then
    . "$IDA_CONFIG_FILE"
fi

#--------------------------------------------------------------------------------
# Load debug configuration file, if it exists...

if [ -f $SCRIPT_DIR/.debug-config ]; then
    . $SCRIPT_DIR/.debug-config
fi

#--------------------------------------------------------------------------------
# Output script usage if requested

if [ "$1" = "" -o "$1" = "-h" ]; then
    echo "$USAGE"
    checkScriptIntegrity
    exit 0
fi

#--------------------------------------------------------------------------------
# Process command line arguments

IDA_ACTION="$1"; shift;

case $IDA_ACTION in
    "upload")
        ;;
    "copy")
        ;;
    "move")
        ;;
    "delete")
        ;;
    "download")
        ;;
    "info")
        ;;
    "inventory")
        ;;
    *)
        echo "Error: Invalid action." >&2
        exit 1;
        ;;
esac

while [ "$1" != "" ]; do
    case "$1" in
        -h)
            echo "$USAGE"
            exit 0;
            ;;
        -p)
            if [ "$2" = "" ]; then
                echo "Error: Missing project name." >&2
                exit 1
            fi
            IDA_PROJECT="$2"
            shift;
            shift;
            ;;
        -c)
            if [ "$2" = "" ]; then
                echo "Error: Missing configuration file pathname." >&2
                exit 1
            fi
            IDA_CONFIG_FILE="$2"
            if [ -f "${IDA_CONFIG_FILE}" ]; then
                . "$IDA_CONFIG_FILE"
            else
                echo "Error: Can't find specified configuration file." >&2
                exit 1
            fi
            shift;
            shift;
            ;;
        -i)
            if [ "$2" = "" ]; then
                echo "Error: Missing ignore file pathname." >&2
                exit 1
            fi
            IDA_IGNORE_FILE="$2"
            if [ ! -f "${IDA_IGNORE_FILE}" ]; then
                echo "Error: Can't find specified ignore file." >&2
                exit 1
            fi
            shift;
            shift;
            ;;
        -t)
            if [ "$2" = "" ]; then
                echo "Error: Missing target host." >&2
                exit 1
            fi
            IDA_HOST=`echo "$2" | sed -e 's/\/$//' | grep '^http'`
            if [ "$IDA_HOST" = "" ]; then
                echo "Error: Invalid target host. Must begin with 'http(s)://'" >&2
                exit 1
            fi
            shift;
            shift;
            ;;
        -v)
            IDA_VERBOSE="true"
            shift;
            ;;
        -x)
            # for testing...
            IDA_VERBOSE="true"
            IDA_DEBUG="true"
            shift;
            ;;
        -X)
            # for testing...
            IDA_VERBOSE="true"
            IDA_DEBUG="true"
            IDA_EXECUTE_ACTION="false"
            shift;
            ;;
        -f)
            if [ "$IDA_ACTION" != "download" -a "$IDA_ACTION" != "info" -a "$IDA_ACTION" != "copy" ]; then
                echo "Error: The -f option is not allowed for the specified action." >&2
                exit 1;
            fi
            IDA_FROZEN="true"
            shift;
            ;;
        *)
            break;
            ;;
    esac
done

#--------------------------------------------------------------------------------
# Verify correct number of pathnames are specified for action...

case $IDA_ACTION in
    "upload")
        if [ "$#" -lt 1 ]; then
            echo "Error: Missing target and local pathnames." >&2
            exit 1;
        fi
        if [ "$#" -lt 2 ]; then
            if [ -e "$1" ]; then
                echo "Error: Missing target pathname." >&2
            else
                echo "Error: Missing local pathname." >&2
            fi
            exit 1;
        fi
        ;;
    "copy")
        if [ "$#" -lt 1 ]; then
            echo "Error: Missing current and new target pathnames." >&2
            exit 1;
        fi
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing new target pathname." >&2
            exit 1;
        fi
        ;;
    "move")
        if [ "$#" -lt 1 ]; then
            echo "Error: Missing current and new target pathnames." >&2
            exit 1;
        fi
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing new target pathname." >&2
            exit 1;
        fi
        ;;
    "download")
        if [ "$#" -lt 1 ]; then
            echo "Error: Missing target and local pathnames." >&2
            exit 1;
        fi
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing local file pathname." >&2
            exit 1;
        fi
        ;;
    "inventory")
        ;;
    *)
        if [ "$#" -lt 1 ]; then
            echo "Error: Missing target pathname." >&2
            exit 1;
        fi
        ;;
esac

#--------------------------------------------------------------------------------
# Retrieve pathnames and determine the target pathname folder (either
# the project frozen root folder or the project staging root folder)...

IDA_PATHNAME_1="$1"
IDA_PATHNAME_2=""

if [ "$#" -gt 1 ]; then
    IDA_PATHNAME_2="$2"
fi

if [ "$#" -gt 2 ]; then
    echo "Error: Too many parameters specified." >&2
    exit 1;
fi

IDA_FROZEN_FOLDER="${IDA_PROJECT}"
IDA_STAGING_FOLDER="${IDA_PROJECT}${IDA_STAGING_SUFFIX}"

if [ "$IDA_FROZEN" = "true" ]; then
    IDA_TARGET_FOLDER="$IDA_FROZEN_FOLDER"
else
    IDA_TARGET_FOLDER="$IDA_STAGING_FOLDER"
fi

#--------------------------------------------------------------------------------
# Verify required parameters are defined somewhere, else use defaults...

if [ "$IDA_PROJECT" = "" ]; then
    echo "Error: Project name not specified anywhere." >&2
    exit 1
fi

if [ "$IDA_HOST" = "" ]; then
    IDA_HOST="ida.fairdata.fi"
fi

#--------------------------------------------------------------------------------
# If a netrc file exists, and neiter username nor password are defined in
# environment variables, which will override any netrc definition, we will
# assume that the user has defined their IDA credentials using netrc.

if [ -f "$HOME/.netrc" ]; then
    if [ "${IDA_USERNAME}${IDA_PASSWORD}" = "" ]; then
        IDA_NETRC="-n";
    fi
fi

#--------------------------------------------------------------------------------
# If credentials not fully defined, prompt for them from user...

if [ "${IDA_NETRC}${IDA_USERNAME}" = "" ]; then
    echo -n "username: "
    read IDA_USERNAME
    if [ "$IDA_USERNAME" = "" ]; then
        echo "Error: Invalid username." >&2
        exit 1
    fi
fi

if [ "${IDA_NETRC}${IDA_PASSWORD}" = "" ]; then
    echo -n "password: "
    stty -echo
    trap 'stty echo' EXIT
    read IDA_PASSWORD
    stty echo
    trap - EXIT
    echo
    if [ "$IDA_PASSWORD" = "" ]; then
        echo "Error: Invalid password." >&2
        exit 1
    fi
fi

#--------------------------------------------------------------------------------
# If using netrc, clear credentials from any configuration variables, else
# build credentials to pass on command line to curl...

if [ "$IDA_NETRC" ]; then
    IDA_USERNAME=""
    IDA_PASSWORD=""
    IDA_VERBOSE_USERNAME="(netrc)"
    IDA_VERBOSE_PASSWORD="(netrc)"
else
    if [ "$IDA_DEBUG" = "true" ]; then
        IDA_VERBOSE_USERNAME="$IDA_USERNAME"
        IDA_VERBOSE_PASSWORD="$IDA_PASSWORD"
    else
        IDA_VERBOSE_USERNAME="(stdin)"
        IDA_VERBOSE_PASSWORD="(stdin)"
    fi
    IDA_STDIN_CREDENTIALS="-u ${IDA_USERNAME}:${IDA_PASSWORD}"
    IDA_VERBOSE_CREDENTIALS="-u ${IDA_VERBOSE_USERNAME}:${IDA_VERBOSE_PASSWORD}"
fi

#--------------------------------------------------------------------------------
# Report request details if specified...

if [ "$IDA_DEBUG" = "true" ]; then
    # for testing...
    echo ""
    echo "Project:         $IDA_PROJECT"
    echo "Username:        $IDA_VERBOSE_USERNAME"
    echo "Password:        $IDA_VERBOSE_PASSWORD"
    echo "Configuration:   $IDA_CONFIG_FILE"
    echo "Host:            $IDA_HOST"
    echo "Action:          $IDA_ACTION"
    case "$IDA_ACTION" in
        "upload")
            echo "Target pathname: $IDA_PATHNAME_1"
            echo "Local pathname:  $IDA_PATHNAME_2"
            ;;
        "copy")
            echo "Target pathname: $IDA_PATHNAME_1"
            echo "New pathname:    $IDA_PATHNAME_2"
            ;;
        "move")
            echo "Target pathname: $IDA_PATHNAME_1"
            echo "New pathname:    $IDA_PATHNAME_2"
            ;;
        "download")
            echo "Target pathname: $IDA_PATHNAME_1"
            echo "Local pathname:  $IDA_PATHNAME_2"
            ;;
        *)
            echo "Target pathname: $IDA_PATHNAME_1"
            ;;
    esac
    echo ""
    echo "Script checksum: $CURRENT_CHECKSUM"
    echo ""
fi

#--------------------------------------------------------------------------------
# Ensure integrity of script

checkScriptIntegrity

#--------------------------------------------------------------------------------
# Process pathname arguments

TARGET_PATHNAME="$IDA_PATHNAME_1"

# Strip any initial or final forward slash and/or spaces from target pathname...
TARGET_PATHNAME=`echo "$TARGET_PATHNAME" | sed -e 's/^ *\/ *//' | sed -e 's/ *\/ *$//'`

if [ "${TARGET_PATHNAME}" = "" ]; then
    if [ "$IDA_ACTION" = "info" ] || [ "$IDA_ACTION" = "inventory" ]; then
        TARGET_PATHNAME="/"
    else
        echo "Error: Target pathname invalid or missing." >&2
        exit 1
    fi
fi

case "$IDA_ACTION" in
    "upload")
        # Strip any final forward slash and/or spaces from local pathname...
        LOCAL_PATHNAME=`echo "$IDA_PATHNAME_2" | sed -e 's/ *\/ *$//'`
        if [ "${LOCAL_PATHNAME}" = "" ]; then
            echo "Error: Local pathname invalid or missing." >&2
            exit 1
        fi
        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Verifying local file or directory exists..."
        fi
        if [ ! -e "$LOCAL_PATHNAME" ]; then
            echo "Error: Can't find specified file or directory." >&2
            exit 1;
        fi
        ;;
    "copy")
        # Strip any initial or final forward slash and/or spaces from new target pathname...
        NEW_TARGET_PATHNAME=`echo "$IDA_PATHNAME_2" | sed -e 's/^ *\/ *//' | sed -e 's/ *\/ *$//'`
        if [ "${TARGET_PATHNAME}" = "" ]; then
            echo "Error: New target pathname invalid or missing." >&2
            exit 1
        fi
        ;;
    "move")
        # Strip any initial or final forward slash and/or spaces from new target pathname...
        NEW_TARGET_PATHNAME=`echo "$IDA_PATHNAME_2" | sed -e 's/^ *\/ *//' | sed -e 's/ *\/ *$//'`
        if [ "${TARGET_PATHNAME}" = "" ]; then
            echo "Error: New target pathname invalid or missing." >&2
            exit 1
        fi
        ;;
    "download")
        # Strip any final forward slash and/or spaces from local pathname...
        LOCAL_PATHNAME=`echo "$IDA_PATHNAME_2" | sed -e 's/ *\/ *$//'`
        if [ "${LOCAL_PATHNAME}" = "" ]; then
            echo "Error: Local pathname invalid or missing." >&2
            exit 1
        fi
        if [ "$IDA_VERBOSE" = "true" ]; then
            echo "Verifying no file or folder exists at local pathname..."
        fi
        if [ -e "$LOCAL_PATHNAME" ]; then
            echo "Error: Specified local pathname already exists." >&2
            exit 1;
        fi
        ;;
    *)
        if [ "${IDA_PATHNAME_2}" != "" ]; then
            echo "Error: Too many parameters specified." >&2
            exit 1
        fi
        ;;
esac

#--------------------------------------------------------------------------------
# Force use of HTTP or HTTPS (unsupported, used in testing)

if [ "$IDA_FORCE_HTTP" = "true" ]; then
    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Forcing use of HTTP"
    fi
    IDA_HOST=`echo "$IDA_HOST" | sed -e 's/https:/http:/'`
fi

if [ "$IDA_FORCE_HTTPS" = "true" ]; then
    if [ "$IDA_VERBOSE" = "true" ]; then
        echo "Forcing use of HTTPS"
    fi
    IDA_HOST=`echo "$IDA_HOST" | sed -e 's/http:/https:/'`
fi

#--------------------------------------------------------------------------------
# Verify the project name is lexically valid

PROJECT_NAME_CHECK=`echo "$IDA_PROJECT" | grep '[^a-z0-9_]'`

if [ "$PROJECT_NAME_CHECK" != "" ]; then
    echo "Error: Invalid characters in project name." >&2
    exit 1
fi

#--------------------------------------------------------------------------------
# Check that the provided credentials are valid by testing access to staging folder

if [ "$IDA_VERBOSE" = "true" ]; then
    echo "Verifying specified credentials are valid..."
fi

if [ "$IDA_DEBUG" = "true" ]; then
    echo "curl $IDA_CURL_OPS $IDA_NETRC --globoff -I -K- -o /dev/null -w \"%{http_code}\" \"${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}\" <<< \"$IDA_STDIN_CREDENTIALS\""
fi

RESPONSE=`curl $IDA_CURL_OPS $IDA_NETRC --globoff -I -K- -o /dev/null -w "%{http_code}" "${IDA_HOST}${IDA_WEBDAV}/${IDA_STAGING_FOLDER}" <<< "$IDA_STDIN_CREDENTIALS"`

if [ "$RESPONSE" = "503" ]; then
    echo "Error: The service is currently unavailable." >&2
    exit 1
fi

if [[ ${RESPONSE::1} != "2" ]]; then
    echo "Error: Authentication failed." >&2
    exit 1
fi

#--------------------------------------------------------------------------------
# Execute the requested action...

case "$IDA_ACTION" in
    "upload")
        execute-ida-upload
        ;;
    "copy")
        execute-ida-copy
        ;;
    "move")
        execute-ida-move
        ;;
    "delete")
        execute-ida-delete
        ;;
    "download")
        execute-ida-download
        ;;
    "info")
        execute-ida-info
        ;;
    "inventory")
        execute-ida-inventory
        ;;
esac

exit 0

